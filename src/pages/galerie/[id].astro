---
import Layout from "../../layouts/Layout.astro";
import PocketBase from "pocketbase";

const { id } = Astro.params;
const pb = new PocketBase("http://127.0.0.1:8090/");

let record = null;
let error = null;

try {
    record = await pb.collection("SVG").getOne(id);
} catch (err) {
    error = "Enregistrement non trouv√©";
    console.error("Erreur lors de la r√©cup√©ration:", err);
}

let chatHistory = [];
if (record?.chat_history) {
    try {
        chatHistory = JSON.parse(record.chat_history);
    } catch (err) {
        console.error("Erreur parsing chat_history:", err);
    }
}

// Traitement du formulaire d'√©dition
if (Astro.request.method === "POST") {
    try {
        const formData = await Astro.request.formData();
        const editPrompt = formData.get("editPrompt");
        const history = formData.get("history");
        const recordId = formData.get("id");

        if (editPrompt && recordId) {
            // Reconstituer l'historique
            let promptList = [];
            try {
                promptList = JSON.parse(history) || [];
            } catch (e) {
                promptList = [];
            }

            // Ajouter le nouveau prompt
            promptList.push({ role: "user", content: editPrompt });

            // Appeler l'API pour g√©n√©rer le nouveau SVG
            const response = await fetch(`${Astro.url.origin}/api/generateSVG`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ messages: promptList }),
            });

            if (response.ok) {
                const data = await response.json();
                const svgMatch = data.svg.content.match(/<svg[\s\S]*?<\/svg>/i);
                const newSvgCode = svgMatch ? svgMatch[0] : data.svg.content;

                // Ajouter la r√©ponse IA √† l'historique
                promptList.push({ role: "assistant", content: newSvgCode });

                // Mettre √† jour l'enregistrement dans PocketBase
                await pb.collection("SVG").update(recordId, {
                    code: newSvgCode,
                    chat_history: JSON.stringify(promptList)
                });

                // Recharger la page pour voir les changements
                return Astro.redirect(`/galerie/${recordId}`);
            }
        }
    } catch (error) {
        console.error("Erreur lors de l'√©dition:", error);
    }
}
---

<Layout>
    <div class="min-h-screen bg-gradient-to-br from-purple-200 to-gray-100 p-8 pb-24">
        <div class="max-w-4xl mx-auto">
            <div class="flex justify-between items-center mb-8">
                <h1 class="text-3xl font-bold text-purple-800">
                    D√©tails du SVG
                </h1>
                <a href="/galerie" class="btn btn-secondary"
                    >‚Üê Retour √† la galerie</a
                >
            </div>

            {
                error ? (
                    <div class="text-center py-16">
                        <p class="text-xl text-red-600">{error}</p>
                        <a href="/galerie" class="btn btn-primary mt-4">
                            Retour √† la galerie
                        </a>
                    </div>
                ) : (
                    <div class="bg-white rounded-lg shadow-lg p-8">
                        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                            <div>
                                <h2 class="text-xl font-semibold mb-4">
                                    Aper√ßu SVG
                                </h2>
                                <div class="bg-gray-50 p-6 rounded-lg flex items-center justify-center min-h-80">
                                    <div set:html={record.code} />
                                </div>
                            </div>

                            <div class="space-y-6">
                                <div>
                                    <h2 class="text-xl font-semibold mb-2">
                                        Prompt initial
                                    </h2>
                                    <p class="bg-gray-50 p-4 rounded-lg text-gray-700">
                                        {record.prompt}
                                    </p>
                                </div>

                                <div>
                                    <h2 class="text-xl font-semibold mb-2">
                                        Informations
                                    </h2>
                                    <div class="bg-gray-50 p-4 rounded-lg space-y-2">
                                        <p>
                                            <span class="font-medium">ID:</span>{" "}
                                            {record.id}
                                        </p>
                                        <p>
                                            <span class="font-medium">
                                                Cr√©√© le:
                                            </span>{" "}
                                            {new Date(
                                                record.created,
                                            ).toLocaleDateString("fr-FR")}{" "}
                                            √†{" "}
                                            {new Date(
                                                record.created,
                                            ).toLocaleTimeString("fr-FR")}
                                        </p>
                                        <p>
                                            <span class="font-medium">
                                                Modifi√© le:
                                            </span>{" "}
                                            {new Date(
                                                record.updated,
                                            ).toLocaleDateString("fr-FR")}{" "}
                                            √†{" "}
                                            {new Date(
                                                record.updated,
                                            ).toLocaleTimeString("fr-FR")}
                                        </p>
                                    </div>
                                </div>

                                <div>
                                    <h2 class="text-xl font-semibold mb-2">
                                        Actions
                                    </h2>
                                    <div class="flex gap-3">
                                        <button
                                            onclick="copyCode()"
                                            class="btn btn-primary"
                                        >
                                            üìã Copier le code
                                        </button>
                                        <button
                                            onclick="downloadSvg()"
                                            class="btn btn-secondary"
                                        >
                                            üíæ T√©l√©charger SVG
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        {chatHistory.length > 0 && (
                            <div class="mt-8">
                                <h2 class="text-xl font-semibold mb-4">
                                    Historique de conversation
                                </h2>
                                <div class="bg-gray-50 p-6 rounded-lg max-h-96 overflow-y-auto space-y-4">
                                    {chatHistory.map((message, index) => (
                                        <div
                                            class={`p-3 rounded-lg ${message.role === "user" ? "bg-blue-100 ml-8" : "bg-green-100 mr-8"}`}
                                        >
                                            <p class="font-medium text-sm mb-1">
                                                {message.role === "user"
                                                    ? "üë§ Utilisateur"
                                                    : "ü§ñ Assistant"}
                                            </p>
                                            <div class="text-sm">
                                                {message.role === "user" ? (
                                                    <p>{message.content}</p>
                                                ) : (
                                                    <pre class="whitespace-pre-wrap font-mono text-xs">
                                                        {message.content}
                                                    </pre>
                                                )}
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )}

                        <div class="mt-8">
                            <h2 class="text-xl font-semibold mb-2">Code SVG</h2>
                            <textarea
                                id="svgCode"
                                class="w-full h-32 p-4 bg-gray-50 rounded-lg font-mono text-sm resize-none"
                                readonly
                            >
                                {record!.code}
                            </textarea>
                        </div>
                    </div>
                )
            }
        </div>
    </div>

    <!-- Formulaire d'√©dition fix√© en bas -->
    <form 
        id="input-prompt-form" 
        class="flex flex-col gap-2 w-full fixed bottom-0 left-0 right-0 bg-base-300 p-4 shadow-lg border-t" 
        method="POST" 
        autocomplete="off"
    >
        <input type="hidden" name="history" value={JSON.stringify(chatHistory)} />
        <input type="hidden" name="id" value={record?.id} />
        <div class="flex items-center gap-2 max-w-4xl mx-auto w-full">
            <input 
                id="prompt-input" 
                name="editPrompt" 
                type="text" 
                class="input input-bordered flex-grow" 
                placeholder="Ex: Change la couleur en rouge, ajoute des √©toiles..." 
                required
            />
            <button class="btn btn-primary" type="submit" id="edit-btn">
                ‚úèÔ∏è Modifier
            </button>
        </div>
        <div class="text-center text-sm text-gray-600">
            D√©crivez les modifications √† apporter au SVG
        </div>
    </form>

    <!-- Loading overlay -->
    <div id="loading-overlay" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
        <div class="bg-white p-6 rounded-lg text-center">
            <span class="loading loading-spinner loading-lg"></span>
            <p class="mt-4">Modification du SVG en cours...</p>
        </div>
    </div>

    <div id="toast" class="toast toast-end hidden">
        <div class="alert alert-success">
            <span>Code copi√© dans le presse-papiers !</span>
        </div>
    </div>
</Layout>

<script>
    function showToast(message) {
        const toast = document.getElementById("toast");
        const alertDiv = toast.querySelector(".alert");
        alertDiv.querySelector("span").textContent = message;
        toast.classList.remove("hidden");

        setTimeout(() => {
            toast.classList.add("hidden");
        }, 3000);
    }

    function copyCode() {
        const codeTextarea = document.getElementById("svgCode");
        navigator.clipboard.writeText(codeTextarea.value).then(() => {
            showToast("Code copi√© dans le presse-papiers !");
        });
    }

    function downloadSvg() {
        const code = document.getElementById("svgCode").value;
        const blob = new Blob([code], { type: "image/svg+xml" });
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = "generated-svg.svg";
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    // Gestion du formulaire d'√©dition
    const form = document.getElementById("input-prompt-form");
    const loadingOverlay = document.getElementById("loading-overlay");
    
    if (form) {
        form.addEventListener("submit", function(e) {
            const input = document.getElementById("prompt-input");
            if (!input.value.trim()) {
                e.preventDefault();
                showToast("Veuillez entrer un prompt de modification");
                return;
            }
            
            // Afficher le loading
            loadingOverlay.classList.remove("hidden");
            loadingOverlay.classList.add("flex");
            
            // D√©sactiver le bouton
            const submitBtn = document.getElementById("edit-btn");
            submitBtn.disabled = true;
            submitBtn.textContent = "Modification...";
        });
    }

    window.copyCode = copyCode;
    window.downloadSvg = downloadSvg;
</script>
