---
import Layout from "../../layouts/Layout.astro";
import PocketBase from "pocketbase";

const { id } = Astro.params;
const pb = new PocketBase("http://127.0.0.1:8090/");

let record = null;
let error = null;

try {
    record = await pb.collection("SVG").getOne(id);
} catch (err) {
    error = "Enregistrement non trouv√©";
    console.error("Erreur lors de la r√©cup√©ration:", err);
}

let chatHistory = [];
if (record?.chat_history) {
    try {
        chatHistory = JSON.parse(record.chat_history);
    } catch (err) {
        console.error("Erreur parsing chat_history:", err);
    }
}
---

<Layout>
    <!-- Container principal avec position relative -->
    <div class="relative min-h-screen bg-gradient-to-br from-purple-200 to-gray-100">
        <!-- Contenu principal avec padding bottom pour laisser la place au formulaire -->
        <div class="p-8 pb-32">
            <div class="max-w-4xl mx-auto">
                <div class="flex justify-between items-center mb-8">
                    <h1 class="text-3xl font-bold text-purple-800">
                        D√©tails du SVG
                    </h1>
                    <a href="/galerie" class="btn btn-secondary">
                        ‚Üê Retour √† la galerie
                    </a>
                </div>

                {error ? (
                    <div class="text-center py-16">
                        <p class="text-xl text-red-600">{error}</p>
                        <a href="/galerie" class="btn btn-primary mt-4">
                            Retour √† la galerie
                        </a>
                    </div>
                ) : (
                    <div class="bg-white rounded-lg shadow-lg p-8">
                        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                            <div>
                                <h2 class="text-xl font-semibold mb-4">
                                    Aper√ßu SVG
                                </h2>
                                <div id="svg-preview" class="bg-gray-50 p-6 rounded-lg flex items-center justify-center min-h-80">
                                    <div set:html={record.code} />
                                </div>
                            </div>

                            <div class="space-y-6">
                                <div>
                                    <h2 class="text-xl font-semibold mb-2">
                                        Prompt initial
                                    </h2>
                                    <p class="bg-gray-50 p-4 rounded-lg text-gray-700">
                                        {record.prompt}
                                    </p>
                                </div>

                                <div>
                                    <h2 class="text-xl font-semibold mb-2">
                                        Informations
                                    </h2>
                                    <div class="bg-gray-50 p-4 rounded-lg space-y-2">
                                        <p>
                                            <span class="font-medium">ID:</span> {record.id}
                                        </p>
                                        <p>
                                            <span class="font-medium">Cr√©√© le:</span> 
                                            {new Date(record.created).toLocaleDateString("fr-FR")} 
                                            √† {new Date(record.created).toLocaleTimeString("fr-FR")}
                                        </p>
                                        <p>
                                            <span class="font-medium">Modifi√© le:</span> 
                                            {new Date(record.updated).toLocaleDateString("fr-FR")} 
                                            √† {new Date(record.updated).toLocaleTimeString("fr-FR")}
                                        </p>
                                    </div>
                                </div>

                                <div>
                                    <h2 class="text-xl font-semibold mb-2">
                                        Actions
                                    </h2>
                                    <div class="flex gap-3">
                                        <button onclick="copyCode()" class="btn btn-primary">
                                            üìã Copier le code
                                        </button>
                                        <button onclick="downloadSvg()" class="btn btn-secondary">
                                            üíæ T√©l√©charger SVG
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="mt-8">
                            <h2 class="text-xl font-semibold mb-4">
                                Historique de conversation
                            </h2>
                            <div id="chat-history" class="bg-gray-50 p-6 rounded-lg max-h-96 overflow-y-auto space-y-4">
                                {chatHistory.map((message, index) => (
                                    <div class={`p-3 rounded-lg ${message.role === "user" ? "bg-blue-100 ml-8" : "bg-green-100 mr-8"}`}>
                                        <p class="font-medium text-sm mb-1">
                                            {message.role === "user" ? "üë§ Utilisateur" : "ü§ñ Assistant"}
                                        </p>
                                        <div class="text-sm">
                                            {message.role === "user" ? (
                                                <p>{message.content}</p>
                                            ) : (
                                                <pre class="whitespace-pre-wrap font-mono text-xs">
                                                    {message.content}
                                                </pre>
                                            )}
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>

                        <div class="mt-8">
                            <h2 class="text-xl font-semibold mb-2">Code SVG</h2>
                            <textarea
                                id="svgCode"
                                class="w-full h-32 p-4 bg-gray-50 rounded-lg font-mono text-sm resize-none"
                                readonly
                            >{record.code}</textarea>
                        </div>
                    </div>
                )}
            </div>
        </div>

        <!-- Formulaire d'√©dition fix√© en bas de l'√©cran -->
        <form 
            id="input-prompt-form" 
            class="fixed bottom-0 left-0 right-0 w-full bg-base-300 border-t border-gray-300 shadow-lg z-50" 
            autocomplete="off"
        >
            <input type="hidden" name="history" value={JSON.stringify(chatHistory)} />
            <input type="hidden" name="id" value={record?.id} />
            <div class="max-w-4xl mx-auto p-4">
                <div class="flex items-center gap-2">
                    <input 
                        id="prompt-input" 
                        name="editPrompt" 
                        type="text" 
                        class="input input-bordered flex-grow bg-white" 
                        placeholder="Ex: Change la couleur en rouge, ajoute des √©toiles..." 
                    />
                    <button class="btn btn-primary" type="submit">
                        ‚úèÔ∏è Modifier
                    </button>
                </div>
            </div>
        </form>
    </div>

    <div id="toast" class="toast toast-end hidden">
        <div class="alert alert-success">
            <span>Message</span>
        </div>
    </div>
</Layout>

<script>
    //@ts-nocheck
    const form = document.getElementById('input-prompt-form');
    const svgPreview = document.getElementById('svg-preview');
    const chatHistory = document.getElementById('chat-history');

    // Fonction pour g√©n√©rer le SVG √† partir du prompt
    async function generateSVG(messages) {
        const response = await fetch("/api/generateSVG", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ messages }),
        });
        const data = await response.json();
        return data.svg.content;
    }

    // Fonction pour mettre √† jour les donn√©es dans PocketBase
    async function update(updatedData) {
        const response = await fetch("/api/updateSVG", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(updatedData),
        });
        return response;
    }

    function showToast(message, type = "success") {
        const toast = document.getElementById("toast");
        const alertDiv = toast.querySelector(".alert");
        alertDiv.className = `alert alert-${type}`;
        alertDiv.querySelector("span").textContent = message;
        toast.classList.remove("hidden");

        setTimeout(() => {
            toast.classList.add("hidden");
        }, 3000);
    }

    function copyCode() {
        const codeTextarea = document.getElementById("svgCode");
        navigator.clipboard.writeText(codeTextarea.value).then(() => {
            showToast("Code copi√© dans le presse-papiers !");
        });
    }

    function downloadSvg() {
        const code = document.getElementById("svgCode").value;
        const blob = new Blob([code], { type: "image/svg+xml" });
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = "generated-svg.svg";
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        showToast("SVG t√©l√©charg√© !");
    }

    // √âcouteur d'√©v√©nement pour le formulaire de soumission
    form?.addEventListener('submit', async (e) => {
        e.preventDefault(); // Emp√™che le rechargement de la page
        const formData = new FormData(form);
        console.log(JSON.stringify(Object.fromEntries(formData)));

        // Cr√©ez un objet pour le prompt de l'utilisateur
        let prompt = {
            role: 'user',
            content: formData.get('editPrompt')
        };

        if (!prompt.content?.trim()) {
            showToast("Veuillez entrer un prompt", "error");
            return;
        }

        // R√©cup√©rez l'historique des messages
        let history = JSON.parse(formData.get('history')) || [];
        history.push(prompt); // Ajoutez le nouveau prompt √† l'historique

        // R√©initialisez le champ de saisie
        document.getElementById('prompt-input').value = '';

        // Affichez un indicateur de chargement
        const originalSvg = svgPreview.innerHTML;
        svgPreview.innerHTML += `<span class="loading loading-ring loading-xl"></span>`;
        
        // Ajoutez le prompt √† l'historique du chat
        chatHistory.innerHTML += `
            <div class="p-3 rounded-lg bg-blue-100 ml-8">
                <p class="font-medium text-sm mb-1">üë§ Utilisateur</p>
                <div class="text-sm">
                    <p>${prompt.content}</p>
                </div>
            </div>
        `;

        try {
            // Appelez la fonction pour g√©n√©rer le SVG
            let aiResponse = await generateSVG(history);
            history.push({ role: 'assistant', content: aiResponse }); // Ajoutez la r√©ponse de l'IA √† l'historique

            // Extraire le SVG de la r√©ponse
            const svgMatch = aiResponse.match(/<svg[\s\S]*?<\/svg>/i);
            aiResponse = svgMatch ? svgMatch[0] : aiResponse;

            console.log("svgCode: ", aiResponse);
            
            // Mettez √† jour l'affichage du SVG
            svgPreview.innerHTML = aiResponse;

            // Ajoutez le code SVG √† l'historique du chat
            chatHistory.innerHTML += `
                <div class="p-3 rounded-lg bg-green-100 mr-8">
                    <p class="font-medium text-sm mb-1">ü§ñ Assistant</p>
                    <div class="text-sm">
                        <pre class="whitespace-pre-wrap font-mono text-xs">${aiResponse}</pre>
                    </div>
                </div>
            `;

            // Mettre √† jour le textarea du code SVG
            document.getElementById('svgCode').value = aiResponse;

            // Mettre √† jour les donn√©es dans PocketBase
            const response = await update({
                id: formData.get("id"),
                code: aiResponse,
                chat_history: JSON.stringify(history),
            });
            const data = await response.json();

            if (data.success) {
                showToast("SVG updated successfully");
                // Mettre √† jour le champ hidden pour les prochaines modifications
                form.querySelector('input[name="history"]').value = JSON.stringify(history);
            } else {
                showToast("Failed to update SVG", "error");
            }

        } catch (error) {
            console.error("Erreur:", error);
            showToast("Erreur lors de la g√©n√©ration", "error");
            svgPreview.innerHTML = originalSvg;
        }

        // Scroll vers le bas de l'historique
        chatHistory.scrollTop = chatHistory.scrollHeight;
    });

    window.copyCode = copyCode;
    window.downloadSvg = downloadSvg;
</script>
