---
import Layout from "../layouts/Layout.astro";
---

<Layout>
    <div class="flex h-screen bg-gray-100">
        <div
            class="w-1/2 bg-white flex items-center justify-center border-r border-gray-300"
        >
            <div
                id="svg-container"
                class="w-full h-full flex items-center justify-center p-8"
            >
                <div class="text-gray-400 text-center">
                    <svg
                        width="64"
                        height="64"
                        viewBox="0 0 24 24"
                        fill="currentColor"
                        class="mx-auto mb-4"
                    >
                        <path
                            d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"
                        ></path>
                    </svg>
                    <p>Votre SVG appara√Ætra ici</p>
                </div>
            </div>
        </div>

        <div class="w-1/2 bg-cyan-400 flex flex-col">
            <div class="bg-cyan-500 text-white text-center py-3 font-semibold">
                Conversation
            </div>

            <div
                id="chat-container"
                class="flex-1 overflow-y-auto p-4 space-y-4"
            >
                <div class="text-center text-cyan-700 text-sm mb-4">
                    D√©crivez le SVG que vous souhaitez g√©n√©rer
                </div>
            </div>

            <div class="p-4 bg-cyan-400 border-t border-cyan-500">
                <div class="flex gap-2">
                    <input
                        type="text"
                        id="user-prompt"
                        placeholder="Tapez votre prompt ici pour SVG..."
                        class="flex-1 px-4 py-3 rounded-lg border-none outline-none text-gray-800"
                    />
                    <button
                        id="generate-button"
                        class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium"
                    >
                        Envoyer
                    </button>
                </div>
                <button class="btn btn-secondary m-2" id="edit-button"
                    >‚úèÔ∏è</button
                >
                <button
                    id="save-button"
                    class="w-full mt-3 bg-green-500 hover:bg-green-600 text-white py-3 rounded-lg font-medium hidden"
                >
                    üíæ Sauvegarder le SVG
                </button>
            </div>
        </div>
    </div>

    <dialog id="saveModal" class="modal">
        <div class="modal-box">
            <h3 class="font-bold text-lg">Sauvegarder le SVG</h3>
            <p class="py-4">
                Voulez-vous sauvegarder ce SVG dans votre galerie ?
            </p>

            <div class="bg-gray-100 p-4 rounded-lg mb-4">
                <div
                    id="modalSvgPreview"
                    class="flex items-center justify-center h-32"
                >
                </div>
            </div>

            <div class="modal-action">
                <button id="confirmSave" class="btn btn-success"
                    >Oui, sauvegarder</button
                >
                <button id="cancelSave" class="btn btn-outline"
                    >Non, annuler</button
                >
            </div>
        </div>
        <form method="dialog" class="modal-backdrop">
            <button>close</button>
        </form>
    </dialog>

    <div id="toast" class="toast toast-end hidden">
        <div class="alert alert-success">
            <span>SVG sauvegard√© avec succ√®s !</span>
        </div>
    </div>
</Layout>

<script>
    //@ts-nocheck

    let promptList = [];
    let currentPrompt = "";
    let currentSvgCode = "";

    async function saveToPocketBase(prompt, svgCode, chatHistory) {
        try {
            const response = await fetch("/api/saveSVG", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    prompt: prompt,
                    code: svgCode,
                    chat_history: chatHistory,
                }),
            });

            if (response.ok) {
                showToast("SVG sauvegard√© avec succ√®s !");
                return true;
            } else {
                console.error(
                    "Erreur lors de la sauvegarde:",
                    await response.text(),
                );
                return false;
            }
        } catch (error) {
            console.error("Erreur lors de la sauvegarde:", error);
            return false;
        }
    }

    function showToast(message) {
        const toast = document.getElementById("toast");
        const alertDiv = toast.querySelector(".alert");
        alertDiv.querySelector("span").textContent = message;
        toast.classList.remove("hidden");

        setTimeout(() => {
            toast.classList.add("hidden");
        }, 3000);
    }

    function addMessageToChat(content, isUser = true) {
        const chatContainer = document.getElementById("chat-container");
        const messageDiv = document.createElement("div");

        if (isUser) {
            messageDiv.className =
                "bg-pink-500 text-white p-3 rounded-lg max-w-xs ml-auto";
            messageDiv.textContent = content;
        } else {
            messageDiv.className =
                "bg-pink-500 text-white p-3 rounded-lg max-w-md";
            messageDiv.innerHTML = `<pre class="whitespace-pre-wrap text-sm font-mono">${content}</pre>`;
        }

        chatContainer.appendChild(messageDiv);
        chatContainer.scrollTop = chatContainer.scrollHeight;
    }

    async function generateSVG(messages) {
        const res = await fetch("/api/generateSVG", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ messages }),
        });
        const data = await res.json();
        return data.svg;
    }

    async function handleSubmit() {
        const promptElement = document.getElementById("user-prompt");
        const prompt = promptElement.value.trim();

        if (!prompt) return;

        addMessageToChat(prompt, true);

        promptElement.value = "";

        promptList.length = 0;
        promptList.push({ role: "user", content: prompt });

        const chatContainer = document.getElementById("chat-container");
        const loadingDiv = document.createElement("div");
        loadingDiv.className = "bg-pink-500 text-white p-3 rounded-lg max-w-md";
        loadingDiv.innerHTML =
            '<span class="loading loading-dots loading-sm"></span> G√©n√©ration en cours...';
        loadingDiv.id = "loading-message";
        chatContainer.appendChild(loadingDiv);
        chatContainer.scrollTop = chatContainer.scrollHeight;

        const generateButton = document.getElementById("generate-button");
        generateButton.disabled = true;
        generateButton.textContent = "G√©n√©ration...";

        try {
            const aiResponse = await generateSVG(promptList);

            const loadingMessage = document.getElementById("loading-message");
            if (loadingMessage) {
                loadingMessage.remove();
            }

            const svgMatch = aiResponse.content.match(/<svg[\s\S]*?<\/svg>/i);
            const finalSvgCode = svgMatch ? svgMatch[0] : aiResponse.content;

            addMessageToChat(finalSvgCode, false);

            const svgContainer = document.getElementById("svg-container");
            svgContainer.innerHTML = finalSvgCode;

            currentPrompt = prompt;
            currentSvgCode = finalSvgCode;
            promptList.push({ role: "assistant", content: finalSvgCode });

            const saveButton = document.getElementById("save-button");
            saveButton.classList.remove("hidden");
        } catch (error) {
            console.error("Erreur lors de la g√©n√©ration:", error);

            const loadingMessage = document.getElementById("loading-message");
            if (loadingMessage) {
                loadingMessage.remove();
            }

            addMessageToChat("Erreur lors de la g√©n√©ration du SVG", false);
        }

        generateButton.disabled = false;
        generateButton.textContent = "Envoyer";
    }

    function showSaveModal() {
        const modal = document.getElementById("saveModal");
        const preview = document.getElementById("modalSvgPreview");
        preview.innerHTML = currentSvgCode;
        modal.showModal();
    }

    async function confirmSave() {
        const modal = document.getElementById("saveModal");
        const success = await saveToPocketBase(
            currentPrompt,
            currentSvgCode,
            promptList,
        );

        if (success) {
            const saveButton = document.getElementById("save-button");
            saveButton.classList.add("hidden");
        }

        modal.close();
    }

    function cancelSave() {
        const modal = document.getElementById("saveModal");
        modal.close();
    }

    const generateButton = document.getElementById("generate-button");
    if (generateButton) {
        generateButton.addEventListener("click", handleSubmit);
    }

    const promptInput = document.getElementById("user-prompt");
    if (promptInput) {
        promptInput.addEventListener("keypress", (e) => {
            if (e.key === "Enter") {
                handleSubmit();
            }
        });
    }

    const saveButton = document.getElementById("save-button");
    if (saveButton) {
        saveButton.addEventListener("click", showSaveModal);
    }

    const confirmSaveButton = document.getElementById("confirmSave");
    if (confirmSaveButton) {
        confirmSaveButton.addEventListener("click", confirmSave);
    }

    const cancelSaveButton = document.getElementById("cancelSave");
    if (cancelSaveButton) {
        cancelSaveButton.addEventListener("click", cancelSave);
    }

    async function handleEdit() {
        let prompt = "";
        let aiResponse = "";
        const promptElement = document.getElementById("user-prompt");
        prompt = promptElement ? promptElement.value : "";
        console.log("Prompt soumis : ", prompt);
        // Ajout du prompt de l'utilisateur √† la liste
        promptList.push({ role: "user", content: prompt });
        const svgContainer = document.getElementById("svg-container");
        // Afficher un spinner de chargement
        svgContainer.innerHTML += `<span class="loading loading-ring loading-xl"></span>`;
        generateButton.disabled = true;
        editButton.disabled = true;
        let svgOutput = document.getElementById("svg-output");
        // Appeler la fonction pour g√©n√©rer le SVG
        aiResponse = await generateSVG(promptList);
        // Extraire le SVG de la r√©ponse
        const svgMatch = aiResponse.content.match(/<svg[\s\S]*?<\/svg>/i);
        aiResponse.content = svgMatch ? svgMatch[0] : "";
        console.log("Code SVG g√©n√©r√© : ", aiResponse.content);
        // Ajouter la r√©ponse de l'IA √† la liste des prompts
        promptList.push(aiResponse);
        // Afficher le SVG g√©n√©r√©
        svgOutput.textContent = aiResponse.content;
        svgContainer.innerHTML = aiResponse.content;
        // R√©activer les boutons
        generateButton.disabled = false;
        editButton.disabled = false;
        console.log("Historique des prompts : ", promptList);
    }

    if (editButton) {
        editButton.addEventListener("click", handleEdit);
    }
</script>
